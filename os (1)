#!/bin/bash
declare -a answers
# Array of questions and answers
questions=("WRITE A C PROGRAM FOR FCFS SCHEDULING ALGORITHM.c"
`````
"WRITE A C PROGRAM FOR PRIORITY SCHEDULING ALGORITHM NON PREEMPTION.c"
"WRITE A C PROGRAM FOR PRIORITY SCHEDULING ALGORITHM WITH PREEMPTION.c"
"WRITE A C PROGRAM FOR ROUND ROBIN SCHEDULING ALGORITHM.c"
"WRITE A C PROGRAM FOR SJF SCHEDULING ALGORITHM NON PREEMPTION.c"
"WRITE A C PROGRAM FOR SJF SCHEDULING ALGORITHM WITH PREEMPTION.c"
"Write a C program t o demonstrate stat system call for a Directory.c"
"Write a C program to demonstrate Directory related system calls to display contents�from�directory.c"
"Write a C program to demonstrate exec system calls.c"
"Write a C program to demonstrate exec, exit system calls.c"
"Write a C program to demonstrate fork, wait system calls.c"
"Write a C program to demonstrate stat system call for a file.c"
"Write a C program to implement FIFOs IPC Mechanisms.c"
"Write a C program to implement Message Queue IPC Mechanisms.c"
"Write a C program to implement Pipe IPC Mechanisms.c"
"Write a C program to Implement Producer-Consumer problem using Semaphores using UNIX LINUX System calls..c"
"Write a C program to implement Shared Memory IPC Mechanisms.c"
"Write a C program to simulate Bankers Algorithm for Deadlock Avoidance..c"
"Write a C program to use IO System calls (open, read, write, close).c"

)

answers[0]='#include <stdio.h>
struct process
{
    int pid, at, bt, st, ft, wt, tat;
};
int main()
{
    struct process p[100], temp;
    int i, j;
    float n;
    int sum = 0, add = 0;
    printf("Enter the number of processes: ");
    scanf("%f", &n);
    printf("Enter pid, at, bt \n");
    for (i = 0; i < n; i++)
    {
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &p[i].pid, &p[i].at, &p[i].bt);
    }
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n - 1; j++)
        {
            if (p[j].at > p[j + 1].at)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
    for (i = 0; i < n; i++)
    {
        if (i == 0)
        {
            p[i].st = p[i].at;
        }
        else if (p[i].at > p[i - 1].ft)
            p[i].st = p[i].at;
        else
            p[i].st = p[i - 1].ft;
        p[i].ft = p[i].bt + p[i].st;
        p[i].wt = p[i].st - p[i].at;
        p[i].tat = p[i].ft - p[i].at;
    }
    printf("\nPID\tAT\tBT\tST\tFT\tWT\tTAT\n");
    for (i = 0; i < n; i++)
    {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].st, p[i].ft, p[i].wt,
               p[i].tat);
    }
    for (int i = 0; i < n; i++)
    {
        sum += p[i].wt;
        add += p[i].tat;
    }
    float a = sum / n;
    float b = add / n;
    printf("Average waiting time:%.2f\n", a);
    printf("%d", add);
    printf("Average TAT:%.2f\n", b);
    return 0;
}
'

answers[1]='#include <stdio.h>
#define MAX 9999;
struct proc
{
    int no, at, bt, ct, wt, tat, pri, status;
};
struct proc read(int i)
{
    struct proc p;
    printf("\nProcess No: %d\n", i);
    p.no = i;
    printf("Enter Arrival Time: ");
    scanf("%d", &p.at);
    printf("Enter Burst Time: ");
    scanf("%d", &p.bt);
    printf("Enter Priority: ");
    scanf("%d", &p.pri);
    p.status = 0;
    return p;
}
void main()
{
    int n, s, ct = 0, remaining;
    struct proc p[10], temp;
    float avgtat = 0, avgwt = 0;
    printf("<--Smallest Priority First Scheduling Algorithm (Non-Preemptive)-->\n");
    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        p[i] = read(i + 1);
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (p[j].at > p[j + 1].at)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
    p[9].pri = MAX;
    remaining = n;
    printf("\nProcessNo\tAT\tBT\tPri\tCT\tTAT\tWT\tRT\n");
    for (ct = p[0].at; remaining != 0;)
    {
        s = 9;
        for (int i = 0; i < n; i++)
            if (p[i].at <= ct && p[i].status != 1 && p[i].pri < p[s].pri)
                s = i;
        p[s].ct = ct = ct + p[s].bt;
        p[s].tat = p[s].ct - p[s].at;
        avgtat += p[s].tat;
        p[s].wt = p[s].tat - p[s].bt;
        avgwt += p[s].wt;
        p[s].status = 1;
        remaining--;

        printf("P%d\t\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[s].no, p[s].at, p[s].bt, p[s].pri, p[s].ct, p[s].tat, p[s].wt, p[s].wt);
    }
    avgtat /= n, avgwt /= n;
    printf("\nAverage TurnAroundTime=%f\nAverage WaitingTime=%f", avgtat, avgwt);
}'

answers[2]='#include <stdio.h>
#define MAX 9999;
struct proc
{
    int no, at, bt, rt, ct, wt, tat, pri, temp;
};
struct proc read(int i)
{
    struct proc p;
    printf("\nProcess No: %d\n", i);
    p.no = i;
    printf("Enter Arrival Time: ");
    scanf("%d", &p.at);
    printf("Enter Burst Time: ");
    scanf("%d", &p.bt);
    p.rt = p.bt;
    printf("Enter Priority: ");
    scanf("%d", &p.pri);
    p.temp = p.pri;
    return p;
}
void main()
{
    int i, n, c, remaining, min_val, min_index;
    struct proc p[10], temp;
    float avgtat = 0, avgwt = 0;
    printf("<--Smallest Priority First Scheduling Algorithm (Preemptive)-->\n");
    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        p[i] = read(i + 1);
    remaining = n;
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (p[j].at > p[j + 1].at)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
    min_val = p[0].temp, min_index = 0;
    for (int j = 0; j < n && p[j].at <= p[0].at; j++)
        if (p[j].temp < min_val)
            min_val = p[j].temp, min_index = j;
    i = min_index;
    c = p[i].ct = p[i].at + 1;
    p[i].rt--;
    if (p[i].rt == 0)
    {
        p[i].temp = MAX;
        remaining--;
    }
    while (remaining > 0)
    {
        min_val = p[0].temp, min_index = 0;
        for (int j = 0; j < n && p[j].at <= c; j++)
            if (p[j].temp < min_val)
                min_val = p[j].temp, min_index = j;
        i = min_index;
        p[i].ct = c = c + 1;
        p[i].rt--;
        if (p[i].rt == 0)
        {
            p[i].temp = MAX;
            remaining--;
        }
    }
    printf("\nProcessNo\tAT\tBT\tPri\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
    {
        p[i].tat = p[i].ct - p[i].at;
        avgtat += p[i].tat;
        p[i].wt = p[i].tat - p[i].bt;
        avgwt += p[i].wt;
        printf("P%d\t\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].no, p[i].at, p[i].bt, p[i].pri, p[i].ct, p[i].tat, p[i].wt);
    }
    avgtat /= n, avgwt /= n;
    printf("\nAverage TurnAroundTime=%f\nAverage WaitingTime=%f", avgtat, avgwt);
}
'

answers[3]='#include <stdio.h>
int n, q[10], front = -1, rear = -1;
struct proc
{
    int no, at, bt, ct, tat, wt, rt, completed;
};
void enqueue(int i)
{
    if (rear == 10)
        printf("Overflow");
    rear++;
    q[rear] = i;
    if (front == -1)
        front = 0;
}
int dequeue()
{
    if (front == -1)
        printf("Underflow");
    int temp = q[front];
    if (front == rear)
        front = rear = -1;
    else
        front++;
    return temp;
}
int isInQueue(int i)
{
    int k;
    for (k = front; k <= rear; k++)
    {
        if (q[k] == i)
            return 1;
    }
    return 0;
}
struct proc read(int i)
{
    struct proc p;
    printf("\nProcess No: %d\n", i);
    p.no = i;
    printf("Enter Arrival Time: ");
    scanf("%d", &p.at);
    printf("Enter Burst Time: ");
    scanf("%d", &p.bt);
    p.rt = p.bt;
    p.completed = 0;
    return p;
}
void main()
{
    int i, j, tq, time = 0, remaining;
    float avgtat = 0, avgwt = 0;

    struct proc p[10], temp;
    printf("<--Round Robin (Queue Implementation) Scheduling Algorithm-->\n");
    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    printf("Enter Time Quantum: ");
    scanf("%d", &tq);
    for (int i = 0; i < n; i++)
        p[i] = read(i + 1);
    for (int i = 0; i < n - 1; i++)
        for (j = 0; j < n - i - 1; j++)
            if (p[j].at > p[j + 1].at)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
    remaining = n;
    enqueue(0);
    printf("\nQueue: ");
    for (time = p[0].at; remaining != 0;)
    {
        i = dequeue();
        if (p[i].rt <= tq)
        {
            time += p[i].rt;
            p[i].rt = 0;
            p[i].completed = 1;
            remaining--;
            printf("-> P%d", p[i].no);
            p[i].ct = time;
            p[i].tat = p[i].ct - p[i].at;
            avgtat += p[i].tat;
            p[i].wt = p[i].tat - p[i].bt;
            avgwt += p[i].wt;
            for (j = 0; j < n; j++)
                if (p[j].at <= time && p[j].completed != 1 && isInQueue(j) != 1)
                    enqueue(j);
        }
        else
        {
            time += tq;
            p[i].rt -= tq;
            printf("-> P%d", p[i].no);
            for (j = 0; j < n; j++)
                if (p[j].at <= time && p[j].completed != 1 && i != j && isInQueue(j) != 1)
                    enqueue(j);
            enqueue(i);
        }
    }
    printf("\n\nProcess\t\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++)
        printf("P%d\t\t%d\t%d\t%d\t%d\t%d\n", p[i].no, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    avgtat /= n, avgwt /= n;
    printf("\nAverage TurnAroundTime=%f\nAverage WaitingTime=%f", avgtat, avgwt);
}
'

answers[4]='#include <stdio.h>
struct proc
{
    int no, at, bt, it, ct, tat, wt;
};
struct proc read(int i)
{
    struct proc p;
    printf("\nProcess No: %d\n", i);
    p.no = i;
    printf("Enter Arrival Time: ");
    scanf("%d", &p.at);
    printf("Enter Burst Time: ");
    scanf("%d", &p.bt);
    return p;
}
int main()
{
    int n, j, min = 0;
    float avgtat = 0, avgwt = 0;
    struct proc p[10], temp;
    printf("<--SJF Scheduling Algorithm (Non-Preemptive)-->\n");
    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        p[i] = read(i + 1);
    for (int i = 0; i < n - 1; i++)
        for (j = 0; j < n - i - 1; j++)
            if (p[j].at > p[j + 1].at)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
    for (j = 1; j < n && p[j].at == p[0].at; j++)
        if (p[j].bt < p[min].bt)
            min = j;
    temp = p[0];
    p[0] = p[min];
    p[min] = temp;
    p[0].it = p[0].at;
    p[0].ct = p[0].it + p[0].bt;
    for (int i = 1; i < n; i++)
    {
        for (j = i + 1, min = i; j < n && p[j].at <= p[i - 1].ct; j++)
            if (p[j].bt < p[min].bt)
                min = j;
        temp = p[i];
        p[i] = p[min];
        p[min] = temp;
        if (p[i].at <= p[i - 1].ct)
            p[i].it = p[i - 1].ct;
        else
            p[i].it = p[i].at;
        p[i].ct = p[i].it + p[i].bt;
    }
    printf("\nProcess\t\tAT\tBT\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++)
    {
        p[i].tat = p[i].ct - p[i].at;
        avgtat += p[i].tat;
        p[i].wt = p[i].tat - p[i].bt;
        avgwt += p[i].wt;
        printf("P%d\t\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].no, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt, p[i].wt);
    }
    avgtat /= n, avgwt /= n;
    printf("\nAverage TurnAroundTime=%f\nAverage WaitingTime=%f", avgtat, avgwt);
}
'

answers[5]='#include <stdio.h>
#define MAX 9999
struct proc
{
    int no, at, bt, rt, ct, tat, wt;
};
struct proc read(int i)
{
    struct proc p;
    printf("\nProcess No: %d\n", i);
    p.no = i;
    printf("Enter Arrival Time: ");
    scanf("%d", &p.at);
    printf("Enter Burst Time: ");
    scanf("%d", &p.bt);
    p.rt = p.bt;
    return p;
}
int main()
{
    struct proc p[10], temp;
    float avgtat = 0, avgwt = 0;
    int n, s, remain = 0, time;
    printf("<--SRTF Scheduling Algorithm (Preemptive)-->\n");

    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        p[i] = read(i + 1);
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (p[j].at > p[j + 1].at)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
    printf("\nProcess\t\tAT\tBT\tCT\tTAT\tWT\n");
    p[9].rt = MAX;
    for (time = 0; remain != n; time++)
    {
        s = 9;
        for (int i = 0; i < n; i++)
            if (p[i].at <= time && p[i].rt < p[s].rt && p[i].rt > 0)
                s = i;
        p[s].rt--;
        if (p[s].rt == 0)
        {
            remain++;
            p[s].ct = time + 1;
            p[s].tat = p[s].ct - p[s].at;
            avgtat += p[s].tat;
            p[s].wt = p[s].tat - p[s].bt;
            avgwt += p[s].wt;
            printf("P%d\t\t%d\t%d\t%d\t%d\t%d\n", p[s].no, p[s].at, p[s].bt, p[s].ct, p[s].tat, p[s].wt);
        }
    }
    avgtat /= n, avgwt /= n;
    printf("\nAverage TurnAroundTime=%f\nAverage WaitingTime=%f", avgtat, avgwt);
}
'

answers[6]='#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <pwd.h>
#include <grp.h>
void printall(struct stat f_stat);
int main()
{
    printf("Enter directory name");
    char dname[];
    scanf("%s",dname);
    DIR *dir=opendir(dname);
    struct dirent *d;
    if(dir)
    while((d=readdir(dir))!-NULL)
    {
        printf("%s",d->d_name);
        switch(d->d_type)
        {
            case DT_UNKNOWN:printf("");
            break;
            case DT_REG:printf("regular");
            break;
            case DT_DIR:printf("directory");
            break;
            case DT_BLK:printf("block");
            break;
            case DT_CHR:printf("charactrer");
            break;
            case DT_SCK:printf("socket");
            break;
        }
        struct stat f_stat;
        stat(d->dname,t.f_stat);
        printall(f_stat);
    }
}
void printall(struct stat f_stat)
{
    char str[10];
    str[0]=f_stat.st_mode&S_IRUSR?"r":"-";
    str[1]=f_stat.st_mode&S_IWUSR?"r":"-";
    str[2]=f_stat.st_mode&S_IXUSR?"r":"-";
    str[3]=f_stat.st_mode&S_IRGRP?"r":"-";
    str[4]=f_stat.st_mode&S_IWGRP?"r":"-";
    str[5]=f_stat.st_mode&S_IXGRP?"r":"-";
    str[6]=f_stat.st_mode&S_IROTH?"r":"-";
    str[7]=f_stat.st_mode&S_IWOTH?"r":"-";
    str[8]=f_stat.st_mode&S_IXOTH?"r":"-";
    str[9]='\0';
    printf("%s",str);
    printf("Number of hard links: %ld\n", (long)f_stat.st_nlink);
    struct passwd *pw = getpwuid(f_stat.st_uid);
    struct group *gr = getgrgid(f_stat.st_gid);
    printf("Size: %lld bytes\n", (long long) f_stat.st_size);
    printf("Last status change: %s", ctime(&f_stat.st_ctime));
    printf("%s %s",pw->pw_name,gr->gr_name);
}


    
    
    
    


        '

answers[7]='#include<stdio.h>
#include<unistd.h>
#include<dirent.h>
int main()
{
    struct dirent *de;
    DIR *dir=opendir("*");
    if(dir==NULL)
    {
        printf("error");
        return 0;
    }
    while((de=readdir(dir))!=NULL)
    {
        printf("%s",d->d_name);
    }
    closedir(dir);
    return 0;
}

    '

answers[8]='#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

int main (){
    printf("exec parent is running it\n");
   execl("./fork ","./fork",NULL);
   printf("after exec it\n");
   printf("One");
   printf("Two");
}
'

answers[9]='#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        printf("Child process (PID: %d) is about to exec 'ls'.\n", getpid());
        
        execl("/bin/ls", "ls", NULL);

        perror("execl");
        exit(1);
    } else {
        // Parent process
        printf("Parent process (PID: %d) is waiting for child to terminate.\n", getpid());

        // Wait for child process to terminate
        int status;
        waitpid(pid, &status, 0);

        if (WIFEXITED(status)) {
            printf("Child exited with status %d.\n", WEXITSTATUS(status));
        } else {
            printf("Child terminated abnormally.\n");
        }
    }

    return 0;
}


// outputs all files in a directory'

answers[10]='#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/wait.h>
int main()
{
    int wstatus;
    printf("PArent is running");
    pid_t p;
    p=fork();
    if(p==0)
    {
        printf("chikd is created");
        printf("child process id is:%d",getpid());
        exit(0);
    }
    else{
        wait(&wstatus);
        printf("parent process id is:%d",getppid());
    }
    return 0;
}
    
'

answers[11]='#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <pwd.h>
#include <grp.h>

int main() {
    struct stat st;
    struct passwd *pw;
    struct group *gr;

    // Corrected the stat function call
    if (stat("Text.txt", &st) < 0) {
        perror("stat error");
        return 1;
    }

    // Check the file type
    if (S_ISREG(st.st_mode))
        printf("regular file\n");
    else if (S_ISDIR(st.st_mode))
        printf("directory\n");
    else if (S_ISBLK(st.st_mode))
        printf("block device\n");
    else if (S_ISLNK(st.st_mode))
        printf("symbolic link\n");
    else if (S_ISFIFO(st.st_mode))
        printf("FIFO/pipe\n");
    else if (S_ISCHR(st.st_mode))
        printf("character device\n");
    else if (S_ISSOCK(st.st_mode))
        printf("socket\n");
    else
        printf("unknown\n");

    // Check the file permissions
    printf("Permissions: ");
    printf((st.st_mode & S_IRUSR) ? "r" : "-");
    printf((st.st_mode & S_IWUSR) ? "w" : "-");
    printf((st.st_mode & S_IXUSR) ? "x" : "-");
    printf((st.st_mode & S_IRGRP) ? "r" : "-");
    printf((st.st_mode & S_IWGRP) ? "w" : "-");
    printf((st.st_mode & S_IXGRP) ? "x" : "-");
    printf((st.st_mode & S_IROTH) ? "r" : "-");
    printf((st.st_mode & S_IWOTH) ? "w" : "-");
    printf((st.st_mode & S_IXOTH) ? "x" : "-");
    printf("\n");

    // Print the number of hard links
    printf("Number of hard links: %ld\n", (long) st.st_nlink);

    // Get and print the owner and group name
    pw = getpwuid(st.st_uid);
    gr = getgrgid(st.st_gid);
    if (pw != NULL && gr != NULL) {
        printf("Owner: %s\n", pw->pw_name);
        printf("Group: %s\n", gr->gr_name);
    } else {
        printf("Owner/Group: Unknown\n");
    }

    // Print the file size
    printf("Size: %lld bytes\n", (long long) st.st_size);

    // Print the last status change time
    printf("Last status change: %s", ctime(&st.st_ctime));

    return 0;
}
'

answers[12]='// C program to implement one side of FIFO
// This side reads first, then reads

// reciever.c

#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
	int fd1;

	// FIFO file path
	char *myfifo1 = "/tmp/myfifo1";
	char *myfifo2 = "/tmp/myfifo2";

	// Creating the named file(FIFO)
	// mkfifo(<pathname>,<permission>)
	mkfifo(myfifo1, 0666);
	mkfifo(myfifo2, 0666);
	char str1[80], str2[80];
	while (1)
	{
		// First open in read only and read
		fd1 = open(myfifo1, O_RDONLY);
		read(fd1, str1, 80);

		// Print the read string and close
		printf("User1: %s\n", str1);
		close(fd1);

		// Now open in write mode and write
		// string taken from user.
		fd1 = open(myfifo2, O_WRONLY);
		fgets(str2, 80, stdin);
		write(fd1, str2, strlen(str2) + 1);
		close(fd1);
	}
	return 0;
}

// sender.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <string.h>

struct msgbuf
{
	long mtype;
	char msgtxt[100];
};

int main()
{
	struct msgbuf message;

	int messageid;
	key_t key;

	char msg[] = "hello aliens!!";

	// ftok
	if ((key = ftok("sender.c", 'a')) == -1)
		perror("key generation failed");

	// msgid
	if ((messageid = msgget(key, 0666 | IPC_CREAT)) == -1)
		perror("msgid generation error");

	// msgsnd
	message.mtype = 1;
	strcpy(message.msgtxt, msg);

	if (msgsnd(messageid, &message, sizeof(message), 0) == -1)
		perror("error in sending message\n");
	else
		printf("sent: %s\n", message.msgtxt);
}
'

answers[13]='// reciever
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <string.h>

struct msgbuf
{
long mtype;
char msgtxt[100];
};

int main( )
{
struct msgbuf message;

int messageid;
key_t key;

char msg[]="hello aliens!!";

//ftok
if((key=ftok("sender.c",'a'))==-1)
perror("key generation failed");

//msgid
if((messageid=msgget(key,0666|IPC_CREAT))==-1)
perror("msgid generation error");

//msgrcv
if(msgrcv(messageid,&message,sizeof(message),1,0)==-1)
perror("error in sending message\n");
else
printf("received: %s \n",message.msgtxt);
}


// sender

#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/msg.h>
#include <string.h>

struct msgbuf
{
long mtype;
char msgtxt[100];
};

int main()
{
struct msgbuf message;

int messageid;
key_t key;

char msg[]="hello aliens!!";

//ftok
if((key=ftok("sender.c",'a'))==-1)
perror("key generation failed");

//msgid
if((messageid=msgget(key,0666|IPC_CREAT))==-1)
perror("msgid generation error");

//msgsnd
message.mtype=1;
strcpy(message.msgtxt,msg);

if(msgsnd(messageid,&message,sizeof(message),0)==-1)
perror("error in sending message\n");
else
printf("sent: %s\n",message.msgtxt);
}
'

answers[14]='#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#define BUFFER_SIZE 1024 
int main()
{
	int fd[2];
	pid_t pid;
	char message[BUFFER_SIZE];
	if(pipe(fd)<0)
	{
		perror("pipe");
		exit(EXIT_FAILURE);
	}
	pid = fork();
	if(pid<0)
	{
		perror("fork");
		exit(EXIT_FAILURE);
	}
	else if(pid>0)
	{
		close(fd[0]);
		printf("Enter message to send to child process:");
		fgets(message,BUFFER_SIZE,stdin);
		write(fd[1],message,strlen(message)+1);
		close(fd[1]);
	}
	else
	{
		close(fd[1]);
		read(fd[0],message,BUFFER_SIZE);
		printf("child process received message:%s",message);
		close(fd[0]);
	}
	return 0;
}

'

answers[15]='#include<stdio.h>
#include<stdlib.h>

int mutex = 1;
int full = 0;
int empty = 3;
int x =0  ;

void producer(){
    if(mutex==1 && empty!=0){
        --mutex;
        ++full;
        --empty;
        x++;
        printf("\n Producer produces item %d",x);
    ++mutex;
    }else{
        printf("\nBuffer is full");
    }
}

void consumer(){
    if(mutex==1 && full!=0){
        --mutex;
        --full;
        ++empty;
        printf("\n Consumer consumes item %d",x);
        x--;
        ++mutex;
    }
    else{
        printf("\n Buffer is empty");

    }
}

int main(){
    int n ;
    printf("\n 1.Producer \n 2.Consumer \n 3.exit");
    while (1)
    {
          printf("\nenter your choice ");
            scanf("%d",&n);
            switch (n)
            {
            case 1:
                producer();
                break;
            case 2:
                consumer();
                break;
            case 3:
                exit(0);
            default:
                break;
            }
    }
    return 0;
}'

answers[16]='// shmreader.c

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/shm.h>

int  main(void){
   key_t  key;
   int  shmid, i , sum ;
   int *pShm = NULL;

   key = ftok("shmreader.c" , 'M' );
   /*request the kernel to give block of shm */
   if (   (shmid = shmget ( key , 5*sizeof(int) ,  0666 )) < 0 ){
   	perror("shmget");
   	exit(1);
   }
   /* attach the shm object to user addrress space */
   if ( (pShm = (int*)shmat ( shmid , NULL , 0)) == NULL ){
         perror("shmat");
         exit(1);
   }
   /* write to the shm array*/
   for ( i = 0 , sum = 0 ; i < 5 ; i ++ ){
     printf("pshm[%d] = %d\n" , i , *(pShm +i) ) ;
     sum = sum + *(pShm+i);
   }
   printf("sum = %d \n" , sum );
   /*detach shm */
   getchar();
   shmdt ( pShm );
   
   return 0;
   
} 

// shmwriter.c

#include<stdio.h>
#include<sys/stat.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/shm.h>

int  main(void){
   key_t  key;
   int  shmid, semid, i ;
   int *pShm = NULL;

   key = ftok("shmreader.c" , 'M' );
   /*request the kernel to give block of shm */
   if (   (shmid = shmget ( key , 5*sizeof(int) , IPC_CREAT | 0666 )) < 0 ){
   	perror("shmget");
   	exit(1);
   }
   /* attach the shm object to user addrress space */
   if ( (pShm = (int*)shmat ( shmid , NULL , 0)) == NULL ){
         perror("shmat");
         exit(1);
   }
   /* write to the shm array*/
   for ( i = 0 ; i < 5 ; i ++ ){
     printf("Wrote %d\n" , *(pShm +i) = (i+1)*10 );
    //  sleep(2);
   }
   printf("Wrote the data to shm \n");
   /*detach shm */
   getchar();
   shmdt ( pShm );
   /* remove the IPC object shm */
   shmctl( shmid , IPC_RMID , NULL );
   return 0;
   
} 
   '

answers[17]='#include<stdio.h>
#include<stdlib.h>
#include<sys/ipc.h>
#include<sys/types.h>
#include<sys/msg.h>
#include<String.h>
int main(void)
{
    int n,m,i,j,k;
    printf("enter the number of processors");
    scanf("%d",&n);
    printf("enter the number of resource");
    scanf("%d",&m);
    int alloc[n][m],max[n][m],avail[m];
    printf("enter the number of allocation");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
             scanf("%d",&alloc[i][j]);

        }
    }
    printf("enter max ");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
             scanf("%d",&max[i][j]);

        }
    }
    printf("Enter avail resource");
    for(int i=0;i<m;i++)
    {
        scanf("%d",&avil[m]);
    }
    int f[n],ans[n],ind=0;
    for(int k=0;k<n;k++)
    {
        f[k]==0;
    }
    int need[n][m];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
    int y=0;
    for(int k=0;k<n;k++)
    {
        for(int i=0;i<n;i++)
        {
            if(f[i]==0)
            {
                int flag=0;
                for(int j=0;j<m;j++)
                {
                    if(nedd[i][j]>avail[j]){
                        falg=1;
                        break;
                    }
                }
                if(flag==0)
                {
                    ans[ind++]=i;
                    for(int y=0;y<m;y++)
                    {
                        avail[y]+=alloc[i][y];
                        f[i]=1;
                    }
                }


                }
            }
        }
    }
    int flag=1;
    for(int i=0;i<n;i++)
    {
        if(f[i]==0)
        {
            falg=0;
            printf("not safe");
            break;
        }
    }
    if(flag==0)
    {
        for(int i=0;i<n-1;i++)
        printf("p%d->",ans[i]);
        printf("p%d",ans[n-1]);
    }
    return 0;
    }
    '

answers[18]='#include<unistd.h>
#include<stdio.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
int main()
{
	int n,m,x;
	char buffer[100];
	n=open("new_file.txt",O_RDONLY);
	
	m=open("new_file1.txt",O_CREAT|O_WRONLY,0777);
	
	while((x=read(n,buffer,1))!=0)
	{
	write(m,buffer,x);
	}
	printf("copy completed");
	close(m);
	close(n);

}
'


# Function to display all questions
display_questions() {
    for ((i=0; i<${#questions[@]}; i++)); do
        echo "$((i+1)): ${questions[$i]}"
    done
}

# Function to ask for user input and display answer
ask_question() {
    read -p "Enter the question number or type 'exit' to quit: " input
    if [[ $input == "exit" ]]; then
        exit 0
    elif [[ $input =~ ^[0-9]+$ && $input -ge 1 && $input -le ${#questions[@]} ]]; then
        index=$((input-1))
        echo " "
        echo " "
        echo "${answers[$index]}"
    else
        echo "Invalid input. Please enter a valid question number or type 'exit' to quit."
    fi
}

clear

echo "
 ____    ___   _  _  ______   _____ 
|  _ \  |_ _| | |/ | |  ___| |  ___|
| |_) |  | |  | ' /  |  _|   |  _|  
|  _ <   | |  | . \  | |___  | |___ 
|_| \_| |___| |_|\_| \_____| |_____|

"
sleep 1
 

display_questions
echo "============================"

while true; do
    ask_question
done
